#!/usr/bin/env python3

import re
import sys

files = [
    ("wheatley/main.py", "__version__.*=.*\"(.*)\""),
    ("setup.py", ".*version.*=.*\"(.*)\"")
]

def main():
    # ===== COLLECT ALL THE VERSION STRINGS =====
    # A list that will be populated by tuples of all the version strings and their locations
    version_string_locations = []

    # Iterate over all the specified files
    for path, regex in files:
        # Compile regex so that it can be searched over all lines of the file
        p = re.compile(regex)

        # Flag to check that we don't iterate over the entire file and silently not find any
        # version strings
        found_match_this_file = False

        # Iterate over all lines of the file
        for i, l in enumerate(open(path).read().split("\n")):
            # Test if this line matches the regex
            match = p.match(l)
            if match is not None:
                try:
                    new_version = match.group(1)

                    # Update the flag to say we found something
                    found_match_this_file = True

                    # Add this to a list of version strings that will be checked later
                    version_string_locations.append((f"{path}:{i}", new_version))
                except AttributeError:
                    # Throw an error if the group wasn't found
                    sys.exit(f"Version string not found with regex '{regex}' on line {i + 1} of {path}")

        # Throw an error if we read an entire file that was specified to have a version string,
        # but don't find one
        if not found_match_this_file:
            sys.exit(f"No version string found in file {path}.")

    # ===== DETERMINE IF THE VERSION STRINGS ARE CONSISTENT =====
    # Set to the currently assumed version number, or None if no versions have been found
    version = None

    # Flag set to false when inconsistency is found
    is_consistent = True

    for location, new_version in version_string_locations:
        # Print the locations in a big list
        print(f"Version string '{new_version}' found at {location}")

        if version is None:
            # This is the first version string, so it is vacuously consistent
            version = new_version
        else:
            # This is not the first version string so we should check its consistency
            is_consistent = is_consistent and (version == new_version)

    # Print a summary string, exiting with error code 1 if the strings are inconsistent
    if not is_consistent:
        sys.exit("INCONSISTENT VERSION NUMBERS!")

    print("All consistent :)")

if __name__ == '__main__':
    main()
